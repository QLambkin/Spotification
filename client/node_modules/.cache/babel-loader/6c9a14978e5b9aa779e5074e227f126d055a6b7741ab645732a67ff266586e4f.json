{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qlamb\\\\Desktop\\\\Projects\\\\spotify-app\\\\client\\\\src\\\\pages\\\\Playlists.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCurrentUserPlaylists } from '../spotify';\nimport { catchErrors } from '../utils';\nimport { SectionWrapper, PlaylistsGrid, Loader } from '../components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playlists = () => {\n  _s();\n  const [playlistsData, setPlaylistsData] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getCurrentUserPlaylists();\n      setPlaylistsData(data);\n    };\n    catchErrors(fetchData());\n  }, []);\n\n  // When playlistsData updates, check if there are more playlists to fetch\n  // then update the state variable\n  useEffect(() => {\n    if (!playlistsData) {\n      return;\n    }\n\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\n    // make sure we get ALL playlists by fetching the next set of playlists\n    const fetchMoreData = async () => {\n      if (playlistsData.next) {\n        const {\n          data\n        } = await axios.get(playlistsData.next);\n        setPlaylistsData(data);\n      }\n    };\n\n    // Use functional update to update playlists state variable\n    // to avoid including playlists as a dependency for this hook\n    // and creating an infinite loop\n    setPlaylists(playlists => [...(playlists ? playlists : []), ...playlistsData.items]);\n\n    // Fetch next set of playlists as needed\n    catchErrors(fetchMoreData());\n  }, [playlistsData]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(SectionWrapper, {\n      title: \"Public Playlists\",\n      breadcrumb: true,\n      children: playlists ? /*#__PURE__*/_jsxDEV(PlaylistsGrid, {\n        playlists: playlists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Playlists, \"7k+NFKyGxcUnGBIpi7HyuIISDKA=\");\n_c = Playlists;\nexport default Playlists;\nvar _c;\n$RefreshReg$(_c, \"Playlists\");","map":{"version":3,"names":["useState","useEffect","axios","getCurrentUserPlaylists","catchErrors","SectionWrapper","PlaylistsGrid","Loader","Playlists","playlistsData","setPlaylistsData","playlists","setPlaylists","fetchData","data","fetchMoreData","next","get","items"],"sources":["C:/Users/qlamb/Desktop/Projects/spotify-app/client/src/pages/Playlists.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCurrentUserPlaylists } from '../spotify';\r\nimport { catchErrors } from '../utils';\r\nimport { SectionWrapper, PlaylistsGrid, Loader } from '../components';\r\n\r\nconst Playlists = () => {\r\n  const [playlistsData, setPlaylistsData] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data } = await getCurrentUserPlaylists();\r\n      setPlaylistsData(data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  // When playlistsData updates, check if there are more playlists to fetch\r\n  // then update the state variable\r\n  useEffect(() => {\r\n    if (!playlistsData) {\r\n      return;\r\n    }\r\n\r\n    // Playlist endpoint only returns 20 playlists at a time, so we need to\r\n    // make sure we get ALL playlists by fetching the next set of playlists\r\n    const fetchMoreData = async () => {\r\n      if (playlistsData.next) {\r\n        const { data } = await axios.get(playlistsData.next);\r\n        setPlaylistsData(data);\r\n      }\r\n    };\r\n\r\n    // Use functional update to update playlists state variable\r\n    // to avoid including playlists as a dependency for this hook\r\n    // and creating an infinite loop\r\n    setPlaylists(playlists => ([\r\n      ...playlists ? playlists : [],\r\n      ...playlistsData.items\r\n    ]));\r\n\r\n    // Fetch next set of playlists as needed\r\n    catchErrors(fetchMoreData());\r\n\r\n  }, [playlistsData]);\r\n\r\n  return (\r\n    <main>\r\n      <SectionWrapper title=\"Public Playlists\" breadcrumb={true}>\r\n        {playlists ? (\r\n          <PlaylistsGrid playlists={playlists} />\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </SectionWrapper>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Playlists;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,uBAAuB,QAAQ,YAAY;AACpD,SAASC,WAAW,QAAQ,UAAU;AACtC,SAASC,cAAc,EAAEC,aAAa,EAAEC,MAAM,QAAQ,eAAe;AAAC;AAEtE,MAAMC,SAAS,GAAG,MAAM;EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,YAAY;MAC5B,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMX,uBAAuB,EAAE;MAChDO,gBAAgB,CAACI,IAAI,CAAC;IACxB,CAAC;IAEDV,WAAW,CAACS,SAAS,EAAE,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACAZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,aAAa,EAAE;MAClB;IACF;;IAEA;IACA;IACA,MAAMM,aAAa,GAAG,YAAY;MAChC,IAAIN,aAAa,CAACO,IAAI,EAAE;QACtB,MAAM;UAAEF;QAAK,CAAC,GAAG,MAAMZ,KAAK,CAACe,GAAG,CAACR,aAAa,CAACO,IAAI,CAAC;QACpDN,gBAAgB,CAACI,IAAI,CAAC;MACxB;IACF,CAAC;;IAED;IACA;IACA;IACAF,YAAY,CAACD,SAAS,IAAK,CACzB,IAAGA,SAAS,GAAGA,SAAS,GAAG,EAAE,GAC7B,GAAGF,aAAa,CAACS,KAAK,CACtB,CAAC;;IAEH;IACAd,WAAW,CAACW,aAAa,EAAE,CAAC;EAE9B,CAAC,EAAE,CAACN,aAAa,CAAC,CAAC;EAEnB,oBACE;IAAA,uBACE,QAAC,cAAc;MAAC,KAAK,EAAC,kBAAkB;MAAC,UAAU,EAAE,IAAK;MAAA,UACvDE,SAAS,gBACR,QAAC,aAAa;QAAC,SAAS,EAAEA;MAAU;QAAA;QAAA;QAAA;MAAA,QAAG,gBAEvC,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA;IACR;MAAA;MAAA;MAAA;IAAA;EACc;IAAA;IAAA;IAAA;EAAA,QACZ;AAEX,CAAC;AAAC,GArDIH,SAAS;AAAA,KAATA,SAAS;AAuDf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}