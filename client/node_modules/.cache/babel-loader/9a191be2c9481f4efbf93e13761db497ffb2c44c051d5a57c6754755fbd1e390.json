{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qlamb\\\\Desktop\\\\Projects\\\\spotify-app\\\\client\\\\src\\\\pages\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { catchErrors } from '../utils';\nimport { getCurrentUserProfile, getCurrentUserPlaylists, getTopArtists, getTopTracks } from '../spotify';\nimport { SectionWrapper, ArtistsGrid, TrackList, PlaylistsGrid, Loader } from '../components';\nimport { StyledHeader } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [profile, setProfile] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const [topArtists, setTopArtists] = useState(null);\n  const [topTracks, setTopTracks] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const userProfile = await getCurrentUserProfile();\n      setProfile(userProfile.data);\n      const userPlaylists = await getCurrentUserPlaylists();\n      setPlaylists(userPlaylists.data);\n\n      // const userTopArtists = await getTopArtists();\n      // setTopArtists(userTopArtists.data);\n\n      // const userTopTracks = await getTopTracks();\n      // setTopTracks(userTopTracks.data);\n    };\n\n    catchErrors(fetchData());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: profile && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(StyledHeader, {\n        type: \"user\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header__inner\",\n          children: [profile.images.length && profile.images[0].url && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"header__img\",\n            src: profile.images[0].url,\n            alt: \"Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header__overline\",\n              children: \"Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"header__name\",\n              children: profile.display_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"header__meta\",\n              children: [playlists && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [playlists.total, \"~ this is the space  Playlist  \", playlists.total !== 1 ? 's' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [profile.followers.total, \" Follower\", profile.followers.total !== 1 ? 's' : '']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: topArtists && topTracks && playlists ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(SectionWrapper, {\n            title: \"Public Playlists\",\n            seeAllLink: \"/playlists\",\n            children: /*#__PURE__*/_jsxDEV(PlaylistsGrid, {\n              playlists: playlists.items.slice(0, 10)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n_s(Profile, \"tdAvUw1qahKUOFxe04V4H7EDR+c=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["useState","useEffect","catchErrors","getCurrentUserProfile","getCurrentUserPlaylists","getTopArtists","getTopTracks","SectionWrapper","ArtistsGrid","TrackList","PlaylistsGrid","Loader","StyledHeader","Profile","profile","setProfile","playlists","setPlaylists","topArtists","setTopArtists","topTracks","setTopTracks","fetchData","userProfile","data","userPlaylists","images","length","url","display_name","total","followers","items","slice"],"sources":["C:/Users/qlamb/Desktop/Projects/spotify-app/client/src/pages/Profile.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { catchErrors } from '../utils';\r\nimport {\r\n  getCurrentUserProfile,\r\n  getCurrentUserPlaylists,\r\n  getTopArtists,\r\n  getTopTracks\r\n} from '../spotify';\r\nimport {\r\n  SectionWrapper,\r\n  ArtistsGrid,\r\n  TrackList,\r\n  PlaylistsGrid,\r\n  Loader\r\n} from '../components';\r\nimport { StyledHeader } from '../styles';\r\n\r\nconst Profile = () => {\r\n  const [profile, setProfile] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [topArtists, setTopArtists] = useState(null);\r\n  const [topTracks, setTopTracks] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const userProfile = await getCurrentUserProfile();\r\n      setProfile(userProfile.data);\r\n\r\n      const userPlaylists = await getCurrentUserPlaylists();\r\n      setPlaylists(userPlaylists.data);\r\n\r\n      // const userTopArtists = await getTopArtists();\r\n      // setTopArtists(userTopArtists.data);\r\n\r\n      // const userTopTracks = await getTopTracks();\r\n      // setTopTracks(userTopTracks.data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {profile && (\r\n        <>\r\n          <StyledHeader type=\"user\">\r\n            <div className=\"header__inner\">\r\n              {profile.images.length && profile.images[0].url && (\r\n                <img className=\"header__img\" src={profile.images[0].url} alt=\"Avatar\"/>\r\n              )}\r\n              <div>\r\n                <div className=\"header__overline\">Profile</div>\r\n                <h1 className=\"header__name\">{profile.display_name}</h1>\r\n                <p className=\"header__meta\">\r\n                  {playlists && (\r\n                    <span>{playlists.total}~ this is the space  Playlist  {playlists.total !== 1 ? 's' : ''}</span>\r\n                  )}\r\n                  <span>\r\n                    {profile.followers.total} Follower{profile.followers.total !== 1 ? 's' : ''}\r\n                  </span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </StyledHeader>\r\n\r\n          <main>\r\n            {topArtists && topTracks && playlists ? (\r\n              <>\r\n                {/* <SectionWrapper title=\"Top artists this month\" seeAllLink=\"/top-artists\">\r\n                  <ArtistsGrid artists={topArtists.items.slice(0, 10)} />\r\n                </SectionWrapper>\r\n\r\n                <SectionWrapper title=\"Top tracks this month\" seeAllLink=\"/top-tracks\">\r\n                  <TrackList tracks={topTracks.items.slice(0, 10)} />\r\n                </SectionWrapper> */}\r\n\r\n                <SectionWrapper title=\"Public Playlists\" seeAllLink=\"/playlists\">\r\n                  <PlaylistsGrid playlists={playlists.items.slice(0, 10)} />\r\n                </SectionWrapper>\r\n              </>\r\n            ) : (\r\n              <Loader />\r\n            )}\r\n          </main>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}