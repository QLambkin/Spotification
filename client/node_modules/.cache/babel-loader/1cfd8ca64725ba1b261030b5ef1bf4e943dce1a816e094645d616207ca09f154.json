{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qlamb\\\\Desktop\\\\Projects\\\\spotify-app\\\\client\\\\src\\\\pages\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { catchErrors } from '../utils';\nimport { getCurrentUserProfile, getCurrentUserPlaylists, getTopArtists, getTopTracks } from '../spotify';\nimport { SectionWrapper, ArtistsGrid, TrackList, PlaylistsGrid } from '../components';\nimport { StyledHeader } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [profile, setProfile] = useState(null);\n  const [playlists, setPlaylists] = useState(null);\n  const [topArtists, setTopArtists] = useState(null);\n  const [topTracks, setTopTracks] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const userProfile = await getCurrentUserProfile();\n      setProfile(userProfile.data);\n      const userPlaylists = await getCurrentUserPlaylists();\n      setPlaylists(userPlaylists.data);\n      const userTopArtists = await getTopArtists();\n      setTopArtists(userTopArtists.data);\n      console.log(userTopArtists);\n      const userTopTracks = await getTopTracks();\n      setTopTracks(userTopTracks.data);\n    };\n    catchErrors(fetchData());\n  }, []);\n  return (\n    /*#__PURE__*/\n    // <>\n    //   {profile && (\n    //     <>\n    //       <StyledHeader type=\"user\">\n    //         <div className=\"header__inner\">\n    //           {profile.images.length && profile.images[0].url && (\n    //             <img className=\"header__img\" src={profile.images[0].url} alt=\"Avatar\"/>\n    //           )}\n    //           <div>\n    //             <div className=\"header__overline\">Profile</div>\n    //             <h1 className=\"header__name\">{profile.display_name}</h1>\n    //             <p className=\"header__meta\">\n    //               {playlists && (\n    //                 <span>{playlists.total} Playlist{playlists.total !== 1 ? 's' : ''}</span>\n    //               )}\n    //               <span>\n    //                 {profile.followers.total} Follower{profile.followers.total !== 1 ? 's' : ''}\n    //               </span>\n    //             </p>\n    //           </div>\n    //         </div>\n    //       </StyledHeader>\n    //       {topArtists && topTracks && playlists && (\n    //         <main>\n    //           <SectionWrapper title=\"Top artists this month\" seeAllLink=\"/top-artists\">\n    //             <ArtistsGrid artists={topArtists.items.slice(0, 10)} />\n    //           </SectionWrapper>\n    //           <SectionWrapper title=\"Top tracks this month\" seeAllLink=\"/top-tracks\">\n    //             <TrackList tracks={topTracks.items.slice(0, 10)} />\n    //           </SectionWrapper>\n    //           <SectionWrapper title=\"Playlists\" seeAllLink=\"/playlists\">\n    //             <PlaylistsGrid playlists={playlists.items.slice(0, 10)} />\n    //           </SectionWrapper>\n    //         </main>\n    //       )}\n    //     </>\n    //   )}\n    // </>\n    _jsxDEV(\"h1\", {\n      children: \"This is the test text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Profile, \"tdAvUw1qahKUOFxe04V4H7EDR+c=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["useState","useEffect","catchErrors","getCurrentUserProfile","getCurrentUserPlaylists","getTopArtists","getTopTracks","SectionWrapper","ArtistsGrid","TrackList","PlaylistsGrid","StyledHeader","Profile","profile","setProfile","playlists","setPlaylists","topArtists","setTopArtists","topTracks","setTopTracks","fetchData","userProfile","data","userPlaylists","userTopArtists","console","log","userTopTracks"],"sources":["C:/Users/qlamb/Desktop/Projects/spotify-app/client/src/pages/Profile.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { catchErrors } from '../utils';\r\nimport {\r\n  getCurrentUserProfile,\r\n  getCurrentUserPlaylists,\r\n  getTopArtists,\r\n  getTopTracks\r\n} from '../spotify';\r\nimport {\r\n  SectionWrapper,\r\n  ArtistsGrid,\r\n  TrackList,\r\n  PlaylistsGrid\r\n} from '../components';\r\nimport { StyledHeader } from '../styles';\r\n\r\nconst Profile = () => {\r\n  const [profile, setProfile] = useState(null);\r\n  const [playlists, setPlaylists] = useState(null);\r\n  const [topArtists, setTopArtists] = useState(null);\r\n  const [topTracks, setTopTracks] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const userProfile = await getCurrentUserProfile();\r\n      setProfile(userProfile.data);\r\n\r\n      const userPlaylists = await getCurrentUserPlaylists();\r\n      setPlaylists(userPlaylists.data);\r\n\r\n      const userTopArtists = await getTopArtists();\r\n      setTopArtists(userTopArtists.data);\r\n      console.log(userTopArtists)\r\n\r\n      const userTopTracks = await getTopTracks();\r\n      setTopTracks(userTopTracks.data);\r\n    };\r\n\r\n    catchErrors(fetchData());\r\n  }, []);\r\n\r\n  return (\r\n    // <>\r\n    //   {profile && (\r\n    //     <>\r\n    //       <StyledHeader type=\"user\">\r\n    //         <div className=\"header__inner\">\r\n    //           {profile.images.length && profile.images[0].url && (\r\n    //             <img className=\"header__img\" src={profile.images[0].url} alt=\"Avatar\"/>\r\n    //           )}\r\n    //           <div>\r\n    //             <div className=\"header__overline\">Profile</div>\r\n    //             <h1 className=\"header__name\">{profile.display_name}</h1>\r\n    //             <p className=\"header__meta\">\r\n    //               {playlists && (\r\n    //                 <span>{playlists.total} Playlist{playlists.total !== 1 ? 's' : ''}</span>\r\n    //               )}\r\n    //               <span>\r\n    //                 {profile.followers.total} Follower{profile.followers.total !== 1 ? 's' : ''}\r\n    //               </span>\r\n    //             </p>\r\n    //           </div>\r\n    //         </div>\r\n    //       </StyledHeader>\r\n\r\n    //       {topArtists && topTracks && playlists && (\r\n    //         <main>\r\n    //           <SectionWrapper title=\"Top artists this month\" seeAllLink=\"/top-artists\">\r\n    //             <ArtistsGrid artists={topArtists.items.slice(0, 10)} />\r\n    //           </SectionWrapper>\r\n\r\n    //           <SectionWrapper title=\"Top tracks this month\" seeAllLink=\"/top-tracks\">\r\n    //             <TrackList tracks={topTracks.items.slice(0, 10)} />\r\n    //           </SectionWrapper>\r\n\r\n    //           <SectionWrapper title=\"Playlists\" seeAllLink=\"/playlists\">\r\n    //             <PlaylistsGrid playlists={playlists.items.slice(0, 10)} />\r\n    //           </SectionWrapper>\r\n    //         </main>\r\n    //       )}\r\n    //     </>\r\n    //   )}\r\n    // </>\r\n    <h1>This is the test text</h1>\r\n  )\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,UAAU;AACtC,SACEC,qBAAqB,EACrBC,uBAAuB,EACvBC,aAAa,EACbC,YAAY,QACP,YAAY;AACnB,SACEC,cAAc,EACdC,WAAW,EACXC,SAAS,EACTC,aAAa,QACR,eAAe;AACtB,SAASC,YAAY,QAAQ,WAAW;AAAC;AAEzC,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,YAAY;MAC5B,MAAMC,WAAW,GAAG,MAAMnB,qBAAqB,EAAE;MACjDW,UAAU,CAACQ,WAAW,CAACC,IAAI,CAAC;MAE5B,MAAMC,aAAa,GAAG,MAAMpB,uBAAuB,EAAE;MACrDY,YAAY,CAACQ,aAAa,CAACD,IAAI,CAAC;MAEhC,MAAME,cAAc,GAAG,MAAMpB,aAAa,EAAE;MAC5Ca,aAAa,CAACO,cAAc,CAACF,IAAI,CAAC;MAClCG,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;MAE3B,MAAMG,aAAa,GAAG,MAAMtB,YAAY,EAAE;MAC1Cc,YAAY,CAACQ,aAAa,CAACL,IAAI,CAAC;IAClC,CAAC;IAEDrB,WAAW,CAACmB,SAAS,EAAE,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MAAA,UAAI;IAAqB;MAAA;MAAA;MAAA;IAAA;EAAK;AAElC,CAAC;AAAC,GArEIT,OAAO;AAAA,KAAPA,OAAO;AAuEb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}