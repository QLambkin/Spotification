{"ast":null,"code":"// Map for localstorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n};\n\n// Map to retrieve localstorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\n/**\r\n * Handles logic for retrieving the Spotify access token from localstorage or URL query params\r\n * @returns {string} a Spotify access token\r\n */\nconst getAccessToken = () => {\n  const queryString = window.localStorage.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n\n  // If there's an error OR the token in localstorage has expired, refresh the token\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  // If there is a valid access token in localstorage, use it\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  // If there is a token in the URL query params, user is logging in for the first time\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localstorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    }\n  }\n  // Set timestamp\n  window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n  // Return access token from query params\n  return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  return false;\n};\nexport const accessToken = getAccessToken();","map":{"version":3,"names":["LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","get","hasError","hasTokenExpired","property","setItem","Date","now"],"sources":["C:/Users/qlamb/Desktop/Projects/spotify-app/client/src/spotify.js"],"sourcesContent":["// Map for localstorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n}\r\n\r\n// Map to retrieve localstorage values\r\nconst LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n}\r\n\r\n/**\r\n * Handles logic for retrieving the Spotify access token from localstorage or URL query params\r\n * @returns {string} a Spotify access token\r\n */\r\nconst getAccessToken = () => {\r\n    const queryString = window.localStorage.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n    }\r\n    const hasError = urlParams.get('error');\r\n\r\n    // If there's an error OR the token in localstorage has expired, refresh the token\r\n    if(hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined'){\r\n        refreshToken();\r\n    }\r\n\r\n    // If there is a valid access token in localstorage, use it\r\n    if(LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined'){\r\n        return LOCALSTORAGE_VALUES.accessToken;\r\n    }\r\n\r\n    // If there is a token in the URL query params, user is logging in for the first time\r\n    if(queryParams[LOCALSTORAGE_KEYS.accessToken]){\r\n        // Store the query params in localstorage\r\n        for(const property in queryParams){\r\n            window.localStorage.setItem(property, queryParams[property])\r\n        }\r\n    }\r\n    // Set timestamp\r\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n    // Return access token from query params\r\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\r\n\r\n    return false;\r\n}\r\n\r\nexport const accessToken = getAccessToken();\r\n"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG;EACtBC,WAAW,EAAE,sBAAsB;EACnCC,YAAY,EAAE,uBAAuB;EACrCC,UAAU,EAAE,2BAA2B;EACvCC,SAAS,EAAE;AACf,CAAC;;AAED;AACA,MAAMC,mBAAmB,GAAG;EACxBJ,WAAW,EAAEK,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACC,WAAW,CAAC;EACvEC,YAAY,EAAEI,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACE,YAAY,CAAC;EACzEC,UAAU,EAAEG,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACG,UAAU,CAAC;EACrEC,SAAS,EAAEE,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,iBAAiB,CAACI,SAAS;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMK,cAAc,GAAG,MAAM;EACzB,MAAMC,WAAW,GAAGJ,MAAM,CAACC,YAAY,CAACI,MAAM;EAC9C,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACH,WAAW,CAAC;EAClD,MAAMI,WAAW,GAAG;IAChB,CAACd,iBAAiB,CAACC,WAAW,GAAGW,SAAS,CAACG,GAAG,CAAC,cAAc,CAAC;IAC9D,CAACf,iBAAiB,CAACE,YAAY,GAAGU,SAAS,CAACG,GAAG,CAAC,eAAe,CAAC;IAChE,CAACf,iBAAiB,CAACG,UAAU,GAAGS,SAAS,CAACG,GAAG,CAAC,YAAY;EAC9D,CAAC;EACD,MAAMC,QAAQ,GAAGJ,SAAS,CAACG,GAAG,CAAC,OAAO,CAAC;;EAEvC;EACA,IAAGC,QAAQ,IAAIC,eAAe,EAAE,IAAIZ,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAC;IAChFC,YAAY,EAAE;EAClB;;EAEA;EACA,IAAGG,mBAAmB,CAACJ,WAAW,IAAII,mBAAmB,CAACJ,WAAW,KAAK,WAAW,EAAC;IAClF,OAAOI,mBAAmB,CAACJ,WAAW;EAC1C;;EAEA;EACA,IAAGa,WAAW,CAACd,iBAAiB,CAACC,WAAW,CAAC,EAAC;IAC1C;IACA,KAAI,MAAMiB,QAAQ,IAAIJ,WAAW,EAAC;MAC9BR,MAAM,CAACC,YAAY,CAACY,OAAO,CAACD,QAAQ,EAAEJ,WAAW,CAACI,QAAQ,CAAC,CAAC;IAChE;EACJ;EACA;EACAZ,MAAM,CAACC,YAAY,CAACY,OAAO,CAACnB,iBAAiB,CAACI,SAAS,EAAEgB,IAAI,CAACC,GAAG,EAAE,CAAC;EACpE;EACA,OAAOP,WAAW,CAACd,iBAAiB,CAACC,WAAW,CAAC;EAEjD,OAAO,KAAK;AAChB,CAAC;AAED,OAAO,MAAMA,WAAW,GAAGQ,cAAc,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}